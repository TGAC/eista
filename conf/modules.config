/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

params {
    run_analyses = params.analyses.split(',').toList()
    skip_analyses = params.skip? params.skip.split(',').toList() : []
}

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

/*
    withName: FASTQC {
        ext.args = '--quiet'
    }
*/

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SPATIAL_TO_H5AD' {
        ext.args   = ''
        // ext.prefix = { "${meta.id}.filtered" }
        publishDir = [
            path: { "${params.outdir}/${params.technology}/mtx_conversions/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SPATIAL_TO_H5AD_XENIUM' {
        ext.args   = ''
        // ext.prefix = { "${meta.id}.filtered" }
        publishDir = [
            path: { "${params.outdir}/${params.technology}/mtx_conversions/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'CONCAT_H5AD' {
        ext.args   = ''
        // ext.prefix = { "${meta.id}.filtered" }
        publishDir = [
            path: { "${params.outdir}/${params.technology}/mtx_conversions" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'MAKE_REPORT' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode
        ]
        // docker.registry = 'docker'
    }

}

if (params.technology == "vizgen") {
    process {
        if (params.run_analyses.contains('primary') and !params.skip_analyses.contains('segmentation_partition_metadata')) {
            withName: 'VPT_QUANTIFICATION' {
                ext.args   = ''
                // ext.prefix = { "${meta.id}.filtered" }
                publishDir = [
                    path: { "${params.outdir}/${params.technology}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                ]
            }

            // withName: 'VPT_SEGMENTATION' {
            //     ext.args   = ''
            //     // ext.prefix = { "${meta.id}.filtered" }
            //     publishDir = [
            //         path: { "${params.outdir}/${params.technology}/${meta.id}" },
            //         mode: params.publish_dir_mode,
            //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //     ]
            // }

            // withName: 'VPT_PARTITION' {
            //     ext.args   = ''
            //     // ext.prefix = { "${meta.id}.filtered" }
            //     publishDir = [
            //         path: { "${params.outdir}/${params.technology}/${meta.id}" },
            //         mode: params.publish_dir_mode,
            //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //     ]
            // }

            // withName: 'VPT_METADATA' {
            //     ext.args   = ''
            //     // ext.prefix = { "${meta.id}.filtered" }
            //     publishDir = [
            //         path: { "${params.outdir}/${params.technology}/${meta.id}" },
            //         mode: params.publish_dir_mode,
            //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //     ]
            // }

        }

        // if (params.run_analyses.contains('primary') and !params.skip_analyses.contains('sum_signals')) {
        //     withName: 'VPT_SUM_SIGNALS' {
        //         ext.args   = ''
        //         // ext.prefix = { "${meta.id}.filtered" }
        //         publishDir = [
        //             path: { "${params.outdir}/${params.technology}/${meta.id}" },
        //             mode: params.publish_dir_mode,
        //             saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        //         ]
        //     }
        // }

        // if (params.run_analyses.contains('primary') and !params.skip_analyses.contains('update_vzg')) {
        //     withName: 'VPT_UPDATE_VZG' {
        //         ext.args   = ''
        //         // ext.prefix = { "${meta.id}.filtered" }
        //         publishDir = [
        //             path: { "${params.outdir}/${params.technology}/${meta.id}" },
        //             mode: params.publish_dir_mode,
        //             saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        //         ]
        //     }
        // }

    }
}


process {

    if (params.run_analyses.contains('secondary') and !params.skip_analyses.contains('qccellfilter')) {
        withName: 'QC_CELL_FILTER' {
            ext.args   = params.args_qccellfilter ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }

    if (params.run_analyses.contains('secondary') and !params.skip_analyses.contains('clustering')) {
        withName: 'CLUSTERING_ANALYSIS' {
            ext.args   = params.args_clustering ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }

    if (params.run_analyses.contains('secondary') and !params.skip_analyses.contains('spatialstats')) {
        withName: 'SPATIAL_STATISTICS' {
            ext.args   = params.args_spatialstats ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }


    if (params.run_analyses.any{it=='tertiary' || it=='annotation'} and !params.skip_analyses.contains('annotation')) {
        withName: 'ANNOTATE_CELLS' {
            ext.args   = params.args_annotation ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.contains('ctmodel') and !params.skip_analyses.contains('ctmodel')) {
        withName: 'TRAIN_CT_MODEL' {
            ext.args   = params.args_trainctmodel ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.any{it=='tertiary' || it=='dea'} and !params.skip_analyses.contains('dea')) {
        withName: 'RANK_GENES' {
            ext.args   = params.args_dea ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.any{it=='tertiary' || it=='cellchat'} and !params.skip_analyses.contains('cellchat')) {
        withName: 'H5AD_TO_MTX_META' {
            // ext.args = params.args_cellchat ?: ''
            // ext.args = (ext.args =~ /--meta\s+\S+/)[0]
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }        
        withName: 'CELLCELL_COMMUNICATION' {
            ext.args   = params.args_cellchat ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    } 

}
